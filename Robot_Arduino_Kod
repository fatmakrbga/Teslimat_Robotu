#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_HMC5883_U.h>

#define ENA_PIN 10
#define IN1_PIN 9
#define IN2_PIN 8
#define IN3_PIN 7
#define IN4_PIN 6
#define ENB_PIN 5
#define MOTOR_SPEED 150

Adafruit_HMC5883_Unified compass;

const float targetX = 1.5; // b noktasının X koordinatı
const float targetY = 1.5; // b noktasının Y koordinatı

void setup() {
  pinMode(ENA_PIN, OUTPUT);
  pinMode(IN1_PIN, OUTPUT);
  pinMode(IN2_PIN, OUTPUT);
  pinMode(IN3_PIN, OUTPUT);
  pinMode(IN4_PIN, OUTPUT);
  pinMode(ENB_PIN, OUTPUT);

  Wire.begin();
  compass.begin();
}

void loop() {
  goToPoint(targetX, targetY); // b noktasına git
  delay(1000); // 1 saniye bekle
}

void goToPoint(float targetX, float targetY) {
  float currentX = 0.0; // a noktasının X koordinatı
  float currentY = 0.0; // a noktasının Y koordinatı

  float deltaX = targetX - currentX;
  float deltaY = targetY - currentY;

  float targetAngle = atan2(deltaY, deltaX) * 180.0 / PI;

  while (true) {
    sensors_event_t event;
    compass.getEvent(&event);
    float currentHeading = (atan2(event.magnetic.y, event.magnetic.x) * 180.0) / PI;
    if (currentHeading < 0) {
      currentHeading += 360.0;
    }

    float deltaAngle = targetAngle - currentHeading;

    if (deltaAngle < -180.0) {
      deltaAngle += 360.0;
    } else if (deltaAngle > 180.0) {
      deltaAngle -= 360.0;
    }

    if (abs(deltaAngle) < 5.0) {
      // Hedef yönüne doğru hareket et
      digitalWrite(IN1_PIN, HIGH);
      digitalWrite(IN2_PIN, LOW);
      digitalWrite(IN3_PIN, HIGH);
      digitalWrite(IN4_PIN, LOW);
    } else {
      // Yönü düzeltmek için sağa veya sola dön
      if (deltaAngle > 0.0) {
        // Sağa dön
        digitalWrite(IN1_PIN, HIGH);
        digitalWrite(IN2_PIN, LOW);
        digitalWrite(IN3_PIN, LOW);
        digitalWrite(IN4_PIN, HIGH);
      } else {
        // Sola dön
        digitalWrite(IN1_PIN, LOW);
        digitalWrite(IN2_PIN, HIGH);
        digitalWrite(IN3_PIN, HIGH);
        digitalWrite(IN4_PIN, LOW);
      }
    }

    analogWrite(ENA_PIN, MOTOR_SPEED);
    analogWrite(ENB_PIN, MOTOR_SPEED);

    float distanceToTarget = sqrt(pow((targetX - currentX), 2) + pow((targetY - currentY), 2));
    if (distanceToTarget < 0.1) {
      // Hedef noktaya ulaşıldı, dur
      stopMotors();
      return;
    }

    // Konum güncellemesi
    currentX += 0.1 * cos(currentHeading * PI / 180.0);
    currentY += 0.1 * sin(currentHeading * PI / 180.0);

    delay(100); // 100 milisaniye bekle
  }
}

void stopMotors() {
  digitalWrite(IN1_PIN, LOW);
  digitalWrite(IN2_PIN, LOW);
  digitalWrite(IN3_PIN, LOW);
  digitalWrite(IN4_PIN, LOW);
  analogWrite(ENA_PIN, 0);
  analogWrite(ENB_PIN, 0);
}
